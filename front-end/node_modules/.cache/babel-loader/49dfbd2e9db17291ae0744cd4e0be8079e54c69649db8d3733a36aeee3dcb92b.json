{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\617060213\\\\Desktop\\\\Thunderbolt\\\\front-end\\\\src\\\\components\\\\list_images.jsx\",\n  _s = $RefreshSig$();\n// ListImages.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ListImages() {\n  _s();\n  const [images, setImages] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('/api/v1/employee/images');\n      if (response.status === 200) {\n        const imagesData = response.data;\n        // Sort images by repository name\n        imagesData.sort((a, b) => a[0].repositoryName.localeCompare(b[0].repositoryName));\n        // Sort and mark new images within each repository\n        imagesData.forEach(repository => {\n          repository.sort((a, b) => new Date(b.imagePushedAt) - new Date(a.imagePushedAt));\n          repository.forEach(image => {\n            image.isNew = isNewImage(image.imagePushedAt);\n          });\n        });\n        setImages(imagesData);\n      } else {\n        // Handle error response\n        console.error('Error fetching images:', response.statusText);\n        navigate('/dashboard'); // Redirect to dashboard on error\n      }\n    } catch (error) {\n      // Handle request error\n      console.error('Error fetching images:', error);\n      navigate('/dashboard'); // Redirect to dashboard on error\n    }\n  };\n  const isNewImage = pushedAt => {\n    // Add logic to determine if the image is new based on pushedAt timestamp\n    // Example logic: Compare pushedAt timestamp with a threshold date to determine if it's new\n    return false;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"List of Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), images.map((repository, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Service: \", repository[0].repositoryName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), repository.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: image.isNew ? 'image-card new' : 'image-card',\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tag\",\n          children: \"Tag:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), \" \", image.imageTag, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"repository-name\",\n          children: [\"Repository: \", image.repositoryName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), \" -\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"pushed-at\",\n          children: [\"Pushed At: \", image.imagePushedAt]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(ListImages, \"mtc6hTiLMl8a9a5YCMyv5/ot0Gk=\", false, function () {\n  return [useNavigate];\n});\n_c = ListImages;\nexport default Listimages;\nvar _c;\n$RefreshReg$(_c, \"ListImages\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","ListImages","_s","images","setImages","navigate","fetchData","response","get","status","imagesData","data","sort","a","b","repositoryName","localeCompare","forEach","repository","Date","imagePushedAt","image","isNew","isNewImage","console","error","statusText","pushedAt","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","className","imageTag","_c","Listimages","$RefreshReg$"],"sources":["C:/Users/617060213/Desktop/Thunderbolt/front-end/src/components/list_images.jsx"],"sourcesContent":["// ListImages.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction ListImages() {\r\n  const [images, setImages] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get('/api/v1/employee/images');\r\n      if (response.status === 200) {\r\n        const imagesData = response.data;\r\n        // Sort images by repository name\r\n        imagesData.sort((a, b) => a[0].repositoryName.localeCompare(b[0].repositoryName));\r\n        // Sort and mark new images within each repository\r\n        imagesData.forEach((repository) => {\r\n          repository.sort((a, b) => new Date(b.imagePushedAt) - new Date(a.imagePushedAt));\r\n          repository.forEach((image) => {\r\n            image.isNew = isNewImage(image.imagePushedAt);\r\n          });\r\n        });\r\n        setImages(imagesData);\r\n      } else {\r\n        // Handle error response\r\n        console.error('Error fetching images:', response.statusText);\r\n        navigate('/dashboard'); // Redirect to dashboard on error\r\n      }\r\n    } catch (error) {\r\n      // Handle request error\r\n      console.error('Error fetching images:', error);\r\n      navigate('/dashboard'); // Redirect to dashboard on error\r\n    }\r\n  };\r\n\r\n  const isNewImage = (pushedAt) => {\r\n    // Add logic to determine if the image is new based on pushedAt timestamp\r\n    // Example logic: Compare pushedAt timestamp with a threshold date to determine if it's new\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>List of Images</h1>\r\n      {images.map((repository, index) => (\r\n        <div key={index}>\r\n          <h2>Service: {repository[0].repositoryName}</h2>\r\n          {repository.map((image, index) => (\r\n            <div key={index} className={image.isNew ? 'image-card new' : 'image-card'}>\r\n              <span className=\"tag\">Tag:</span> {image.imageTag}{' '}\r\n              <span className=\"repository-name\">Repository: {image.repositoryName}</span> -{' '}\r\n              <span className=\"pushed-at\">Pushed At: {image.imagePushedAt}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Listimages;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMU,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACdU,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,yBAAyB,CAAC;MAC3D,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,UAAU,GAAGH,QAAQ,CAACI,IAAI;QAChC;QACAD,UAAU,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,CAACE,cAAc,CAACC,aAAa,CAACF,CAAC,CAAC,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC;QACjF;QACAL,UAAU,CAACO,OAAO,CAAEC,UAAU,IAAK;UACjCA,UAAU,CAACN,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIK,IAAI,CAACL,CAAC,CAACM,aAAa,CAAC,GAAG,IAAID,IAAI,CAACN,CAAC,CAACO,aAAa,CAAC,CAAC;UAChFF,UAAU,CAACD,OAAO,CAAEI,KAAK,IAAK;YAC5BA,KAAK,CAACC,KAAK,GAAGC,UAAU,CAACF,KAAK,CAACD,aAAa,CAAC;UAC/C,CAAC,CAAC;QACJ,CAAC,CAAC;QACFhB,SAAS,CAACM,UAAU,CAAC;MACvB,CAAC,MAAM;QACL;QACAc,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAElB,QAAQ,CAACmB,UAAU,CAAC;QAC5DrB,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACd;MACAD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CpB,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;EAED,MAAMkB,UAAU,GAAII,QAAQ,IAAK;IAC/B;IACA;IACA,OAAO,KAAK;EACd,CAAC;EAED,oBACE3B,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtB7B,MAAM,CAAC8B,GAAG,CAAC,CAACf,UAAU,EAAEgB,KAAK,kBAC5BlC,OAAA;MAAA4B,QAAA,gBACE5B,OAAA;QAAA4B,QAAA,GAAI,WAAS,EAACV,UAAU,CAAC,CAAC,CAAC,CAACH,cAAc;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC/Cd,UAAU,CAACe,GAAG,CAAC,CAACZ,KAAK,EAAEa,KAAK,kBAC3BlC,OAAA;QAAiBmC,SAAS,EAAEd,KAAK,CAACC,KAAK,GAAG,gBAAgB,GAAG,YAAa;QAAAM,QAAA,gBACxE5B,OAAA;UAAMmC,SAAS,EAAC,KAAK;UAAAP,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,KAAC,EAACX,KAAK,CAACe,QAAQ,EAAE,GAAG,eACtDpC,OAAA;UAAMmC,SAAS,EAAC,iBAAiB;UAAAP,QAAA,GAAC,cAAY,EAACP,KAAK,CAACN,cAAc;QAAA;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,MAAE,EAAC,GAAG,eACjFhC,OAAA;UAAMmC,SAAS,EAAC,WAAW;UAAAP,QAAA,GAAC,aAAW,EAACP,KAAK,CAACD,aAAa;QAAA;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GAH3DE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIV,CACN,CAAC;IAAA,GARME,KAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASV,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC9B,EAAA,CA1DQD,UAAU;EAAA,QAEAH,WAAW;AAAA;AAAAuC,EAAA,GAFrBpC,UAAU;AA4DnB,eAAeqC,UAAU;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}