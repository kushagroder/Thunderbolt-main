{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\617060213\\\\Desktop\\\\Thunderbolt\\\\front-end\\\\src\\\\components\\\\IP_Whitelist.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Importing navigate from React Router\nimport './IP_Whitelist.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IPAddressForm = () => {\n  _s();\n  const navigate = useNavigate(); // Initializing navigate\n  const [ipAddress, setIPAddress] = useState('');\n  const [responseMessage, setResponseMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Function to fetch the user's IP address\n  const fetchIPAddress = async () => {\n    try {\n      const response = await fetch('https://api.ipify.org?format=json');\n      const data = await response.json();\n      const userIPAddress = data.ip;\n      setIPAddress(userIPAddress);\n    } catch (error) {\n      setErrorMessage('Error fetching IP address');\n      console.error('Error:', error);\n    }\n  };\n  const handleChange = e => {\n    setIPAddress(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const ipRegex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n    if (!ipRegex.test(ipAddress)) {\n      setErrorMessage('Invalid IP address');\n      return;\n    }\n    try {\n      const response = await fetch('your_post_endpoint_here', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ipAddress\n        })\n      });\n      const data = await response.json();\n      setResponseMessage(data.message);\n    } catch (error) {\n      setErrorMessage('Error sending request');\n      console.error('Error:', error);\n    }\n  };\n\n  // Function to navigate to the home page\n  const goToHome = () => {\n    navigate('/home');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"IP Address Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchIPAddress,\n      children: \"Get My IP Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter IP Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ipAddress,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToHome,\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), \" \", responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Response: \", responseMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 27\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(IPAddressForm, \"cOLjYV8ukw4lc/9x+dYbY1cJi5w=\", false, function () {\n  return [useNavigate];\n});\n_c = IPAddressForm;\nexport default IPAddressForm;\nvar _c;\n$RefreshReg$(_c, \"IPAddressForm\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","IPAddressForm","_s","navigate","ipAddress","setIPAddress","responseMessage","setResponseMessage","errorMessage","setErrorMessage","fetchIPAddress","response","fetch","data","json","userIPAddress","ip","error","console","handleChange","e","target","value","handleSubmit","preventDefault","ipRegex","test","method","headers","body","JSON","stringify","message","goToHome","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/617060213/Desktop/Thunderbolt/front-end/src/components/IP_Whitelist.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // Importing navigate from React Router\r\nimport './IP_Whitelist.css';\r\n\r\nconst IPAddressForm = () => {\r\n  const navigate = useNavigate(); // Initializing navigate\r\n  const [ipAddress, setIPAddress] = useState('');\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  // Function to fetch the user's IP address\r\n  const fetchIPAddress = async () => {\r\n    try {\r\n      const response = await fetch('https://api.ipify.org?format=json');\r\n      const data = await response.json();\r\n      const userIPAddress = data.ip;\r\n      setIPAddress(userIPAddress);\r\n    } catch (error) {\r\n      setErrorMessage('Error fetching IP address');\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setIPAddress(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const ipRegex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n\r\n    if (!ipRegex.test(ipAddress)) {\r\n      setErrorMessage('Invalid IP address');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch('your_post_endpoint_here', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ ipAddress }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      setResponseMessage(data.message);\r\n    } catch (error) {\r\n      setErrorMessage('Error sending request');\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  // Function to navigate to the home page\r\n  const goToHome = () => {\r\n    navigate('/home');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>IP Address Form</h1>\r\n      <button onClick={fetchIPAddress}>Get My IP Address</button>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Enter IP Address:\r\n          <input\r\n            type=\"text\"\r\n            value={ipAddress}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      <button onClick={goToHome}>Home</button> {/* Button to navigate to home page */}\r\n      {responseMessage && <p>Response: {responseMessage}</p>}\r\n      {errorMessage && <p>Error: {errorMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IPAddressForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}