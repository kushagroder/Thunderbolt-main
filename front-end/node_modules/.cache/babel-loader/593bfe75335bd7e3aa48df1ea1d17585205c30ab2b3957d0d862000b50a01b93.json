{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\617060213\\\\Desktop\\\\Thunderbolt\\\\front-end\\\\src\\\\components\\\\IP_Whitelist\\\\IP_Whitelist.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Importing navigate from React Router\nimport './IP_Whitelist.css';\nimport { BASE_URL, startLinks_containers, stopLinks_containers, Ip_whitelist } from '../../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IPAddressForm = ({\n  environment_ip\n}) => {\n  _s();\n  const navigate = useNavigate(); // Initializing navigate\n  const [ipAddress, setIPAddress] = useState('');\n  const [responseMessage, setResponseMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Function to fetch the user's IP address\n  const fetchIPAddress = async () => {\n    try {\n      const response = await fetch('https://api.ipify.org?format=json');\n      const data = await response.json();\n      const userIPAddress = data.ip;\n      setIPAddress(userIPAddress);\n    } catch (error) {\n      setErrorMessage('Error fetching IP address');\n      console.error('Error:', error);\n    }\n  };\n  const handleChange = e => {\n    setIPAddress(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const ipRegex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n    if (!ipRegex.test(ipAddress)) {\n      setErrorMessage('Invalid IP address');\n      return;\n    }\n    try {\n      // Use different endpoint based on environment_ip\n      let endpoint = '';\n      switch (environment_ip) {\n        case 'BF1':\n          endpoint = 'Ip_whitelist.link1';\n          break;\n        case 'BF2':\n          endpoint = 'Ip_whitelist.link1';\n          break;\n        case 'BF3':\n          endpoint = 'staging_endpoint_here';\n          break;\n        case 'BF4':\n          endpoint = 'production_endpoint_here';\n          break;\n        default:\n          break;\n      }\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ipAddress\n        })\n      });\n      const data = await response.json();\n      setResponseMessage(data.message);\n    } catch (error) {\n      setErrorMessage('Error sending request');\n      console.error('Error:', error);\n    }\n  };\n\n  // Function to navigate to the home page\n  const goToHome = () => {\n    navigate('/home');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"IP Address Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchIPAddress,\n      children: \"Get My IP Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter IP Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ipAddress,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToHome,\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), \" \", responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Response: \", responseMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 27\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(IPAddressForm, \"cOLjYV8ukw4lc/9x+dYbY1cJi5w=\", false, function () {\n  return [useNavigate];\n});\n_c = IPAddressForm;\nexport default IPAddressForm;\nvar _c;\n$RefreshReg$(_c, \"IPAddressForm\");","map":{"version":3,"names":["React","useState","useNavigate","BASE_URL","startLinks_containers","stopLinks_containers","Ip_whitelist","jsxDEV","_jsxDEV","IPAddressForm","environment_ip","_s","navigate","ipAddress","setIPAddress","responseMessage","setResponseMessage","errorMessage","setErrorMessage","fetchIPAddress","response","fetch","data","json","userIPAddress","ip","error","console","handleChange","e","target","value","handleSubmit","preventDefault","ipRegex","test","endpoint","method","headers","body","JSON","stringify","message","goToHome","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/617060213/Desktop/Thunderbolt/front-end/src/components/IP_Whitelist/IP_Whitelist.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // Importing navigate from React Router\r\nimport './IP_Whitelist.css';\r\nimport { BASE_URL, startLinks_containers,stopLinks_containers, Ip_whitelist } from '../../constants.js';\r\n\r\nconst IPAddressForm = ({ environment_ip }) => {\r\n  const navigate = useNavigate(); // Initializing navigate\r\n  const [ipAddress, setIPAddress] = useState('');\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  // Function to fetch the user's IP address\r\n  const fetchIPAddress = async () => {\r\n    try {\r\n      const response = await fetch('https://api.ipify.org?format=json');\r\n      const data = await response.json();\r\n      const userIPAddress = data.ip;\r\n      setIPAddress(userIPAddress);\r\n    } catch (error) {\r\n      setErrorMessage('Error fetching IP address');\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setIPAddress(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const ipRegex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n\r\n    if (!ipRegex.test(ipAddress)) {\r\n      setErrorMessage('Invalid IP address');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Use different endpoint based on environment_ip\r\n      let endpoint = '';\r\n      switch (environment_ip) {\r\n        case 'BF1':\r\n          endpoint = 'Ip_whitelist.link1';\r\n          break;\r\n        case 'BF2':\r\n          endpoint = 'Ip_whitelist.link1';\r\n          break;\r\n        case 'BF3':\r\n          endpoint = 'staging_endpoint_here';\r\n          break;\r\n        case 'BF4':\r\n          endpoint = 'production_endpoint_here';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ ipAddress }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      setResponseMessage(data.message);\r\n    } catch (error) {\r\n      setErrorMessage('Error sending request');\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  // Function to navigate to the home page\r\n  const goToHome = () => {\r\n    navigate('/home');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>IP Address Form</h1>\r\n      <button onClick={fetchIPAddress}>Get My IP Address</button>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Enter IP Address:\r\n          <input\r\n            type=\"text\"\r\n            value={ipAddress}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      <button onClick={goToHome}>Home</button> {/* Button to navigate to home page */}\r\n      {responseMessage && <p>Response: {responseMessage}</p>}\r\n      {errorMessage && <p>Error: {errorMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IPAddressForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}